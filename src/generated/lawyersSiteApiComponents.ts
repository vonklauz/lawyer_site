/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useLawyersSiteApiContext,
  LawyersSiteApiContext,
  queryKeyFn,
} from "./lawyersSiteApiContext";
import { deepMerge } from "./lawyersSiteApiUtils";
import type * as Fetcher from "./lawyersSiteApiFetcher";
import { lawyersSiteApiFetch } from "./lawyersSiteApiFetcher";
import type * as Schemas from "./lawyersSiteApiSchemas";

type QueryFnOptions = {
  signal?: AbortController["signal"];
};

export type LoginAuthLoginPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type LoginAuthLoginPostVariables = {
  body: Schemas.AuthLoginDTO;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchLoginAuthLoginPost = (
  variables: LoginAuthLoginPostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    LoginAuthLoginPostError,
    Schemas.AuthLoginDTO,
    {},
    {},
    {}
  >({ url: "/auth/login/", method: "post", ...variables, signal });

export const useLoginAuthLoginPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      LoginAuthLoginPostError,
      LoginAuthLoginPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    LoginAuthLoginPostError,
    LoginAuthLoginPostVariables
  >({
    mutationFn: (variables: LoginAuthLoginPostVariables) =>
      fetchLoginAuthLoginPost(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type RegistrationAuthRegisterPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type RegistrationAuthRegisterPostVariables = {
  body: Schemas.AuthRegistrationDTO;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchRegistrationAuthRegisterPost = (
  variables: RegistrationAuthRegisterPostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    RegistrationAuthRegisterPostError,
    Schemas.AuthRegistrationDTO,
    {},
    {},
    {}
  >({ url: "/auth/register/", method: "post", ...variables, signal });

export const useRegistrationAuthRegisterPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      RegistrationAuthRegisterPostError,
      RegistrationAuthRegisterPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    RegistrationAuthRegisterPostError,
    RegistrationAuthRegisterPostVariables
  >({
    mutationFn: (variables: RegistrationAuthRegisterPostVariables) =>
      fetchRegistrationAuthRegisterPost(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type VerifyEmailAuthVerifyTokenPostQueryParams = {
  token: string;
};

export type VerifyEmailAuthVerifyTokenPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type VerifyEmailAuthVerifyTokenPostVariables = {
  queryParams: VerifyEmailAuthVerifyTokenPostQueryParams;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchVerifyEmailAuthVerifyTokenPost = (
  variables: VerifyEmailAuthVerifyTokenPostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    VerifyEmailAuthVerifyTokenPostError,
    undefined,
    {},
    VerifyEmailAuthVerifyTokenPostQueryParams,
    {}
  >({ url: "/auth/verify-token/", method: "post", ...variables, signal });

export const useVerifyEmailAuthVerifyTokenPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      VerifyEmailAuthVerifyTokenPostError,
      VerifyEmailAuthVerifyTokenPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    VerifyEmailAuthVerifyTokenPostError,
    VerifyEmailAuthVerifyTokenPostVariables
  >({
    mutationFn: (variables: VerifyEmailAuthVerifyTokenPostVariables) =>
      fetchVerifyEmailAuthVerifyTokenPost(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type PasswordResetRequestAuthPasswordResetRequestPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type PasswordResetRequestAuthPasswordResetRequestPostVariables = {
  body: Schemas.PasswordResetRequestDTO;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchPasswordResetRequestAuthPasswordResetRequestPost = (
  variables: PasswordResetRequestAuthPasswordResetRequestPostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    PasswordResetRequestAuthPasswordResetRequestPostError,
    Schemas.PasswordResetRequestDTO,
    {},
    {},
    {}
  >({
    url: "/auth/password/reset/request/",
    method: "post",
    ...variables,
    signal,
  });

export const usePasswordResetRequestAuthPasswordResetRequestPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      PasswordResetRequestAuthPasswordResetRequestPostError,
      PasswordResetRequestAuthPasswordResetRequestPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    PasswordResetRequestAuthPasswordResetRequestPostError,
    PasswordResetRequestAuthPasswordResetRequestPostVariables
  >({
    mutationFn: (
      variables: PasswordResetRequestAuthPasswordResetRequestPostVariables,
    ) =>
      fetchPasswordResetRequestAuthPasswordResetRequestPost(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type PasswordResetConfirmAuthPasswordResetConfirmPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type PasswordResetConfirmAuthPasswordResetConfirmPostVariables = {
  body: Schemas.PasswordResetConfirmDTO;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchPasswordResetConfirmAuthPasswordResetConfirmPost = (
  variables: PasswordResetConfirmAuthPasswordResetConfirmPostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    PasswordResetConfirmAuthPasswordResetConfirmPostError,
    Schemas.PasswordResetConfirmDTO,
    {},
    {},
    {}
  >({
    url: "/auth/password/reset/confirm/",
    method: "post",
    ...variables,
    signal,
  });

export const usePasswordResetConfirmAuthPasswordResetConfirmPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      PasswordResetConfirmAuthPasswordResetConfirmPostError,
      PasswordResetConfirmAuthPasswordResetConfirmPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    PasswordResetConfirmAuthPasswordResetConfirmPostError,
    PasswordResetConfirmAuthPasswordResetConfirmPostVariables
  >({
    mutationFn: (
      variables: PasswordResetConfirmAuthPasswordResetConfirmPostVariables,
    ) =>
      fetchPasswordResetConfirmAuthPasswordResetConfirmPost(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type LogoutAuthLogoutPostError = Fetcher.ErrorWrapper<undefined>;

export type LogoutAuthLogoutPostVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchLogoutAuthLogoutPost = (
  variables: LogoutAuthLogoutPostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<void, LogoutAuthLogoutPostError, undefined, {}, {}, {}>({
    url: "/auth/logout/",
    method: "post",
    ...variables,
    signal,
  });

export const useLogoutAuthLogoutPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      LogoutAuthLogoutPostError,
      LogoutAuthLogoutPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    LogoutAuthLogoutPostError,
    LogoutAuthLogoutPostVariables
  >({
    mutationFn: (variables: LogoutAuthLogoutPostVariables) =>
      fetchLogoutAuthLogoutPost(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type RotateAuthRotateTokensPostError = Fetcher.ErrorWrapper<undefined>;

export type RotateAuthRotateTokensPostVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchRotateAuthRotateTokensPost = (
  variables: RotateAuthRotateTokensPostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    RotateAuthRotateTokensPostError,
    undefined,
    {},
    {},
    {}
  >({ url: "/auth/rotate-tokens/", method: "post", ...variables, signal });

export const useRotateAuthRotateTokensPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      RotateAuthRotateTokensPostError,
      RotateAuthRotateTokensPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    RotateAuthRotateTokensPostError,
    RotateAuthRotateTokensPostVariables
  >({
    mutationFn: (variables: RotateAuthRotateTokensPostVariables) =>
      fetchRotateAuthRotateTokensPost(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type Activation2faEmailActivationPostError =
  Fetcher.ErrorWrapper<undefined>;

export type Activation2faEmailActivationPostVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchActivation2faEmailActivationPost = (
  variables: Activation2faEmailActivationPostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    Activation2faEmailActivationPostError,
    undefined,
    {},
    {},
    {}
  >({ url: "/2fa/email/activation/", method: "post", ...variables, signal });

export const useActivation2faEmailActivationPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      Activation2faEmailActivationPostError,
      Activation2faEmailActivationPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    Activation2faEmailActivationPostError,
    Activation2faEmailActivationPostVariables
  >({
    mutationFn: (variables: Activation2faEmailActivationPostVariables) =>
      fetchActivation2faEmailActivationPost(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type Activation2faEmailDeactivatePostError =
  Fetcher.ErrorWrapper<undefined>;

export type Activation2faEmailDeactivatePostVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchActivation2faEmailDeactivatePost = (
  variables: Activation2faEmailDeactivatePostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    Activation2faEmailDeactivatePostError,
    undefined,
    {},
    {},
    {}
  >({ url: "/2fa/email/deactivate/", method: "post", ...variables, signal });

export const useActivation2faEmailDeactivatePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      Activation2faEmailDeactivatePostError,
      Activation2faEmailDeactivatePostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    Activation2faEmailDeactivatePostError,
    Activation2faEmailDeactivatePostVariables
  >({
    mutationFn: (variables: Activation2faEmailDeactivatePostVariables) =>
      fetchActivation2faEmailDeactivatePost(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type SendCode2faEmailSendCodePostError = Fetcher.ErrorWrapper<undefined>;

export type SendCode2faEmailSendCodePostVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchSendCode2faEmailSendCodePost = (
  variables: SendCode2faEmailSendCodePostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    SendCode2faEmailSendCodePostError,
    undefined,
    {},
    {},
    {}
  >({ url: "/2fa/email/send-code/", method: "post", ...variables, signal });

export const useSendCode2faEmailSendCodePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      SendCode2faEmailSendCodePostError,
      SendCode2faEmailSendCodePostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    SendCode2faEmailSendCodePostError,
    SendCode2faEmailSendCodePostVariables
  >({
    mutationFn: (variables: SendCode2faEmailSendCodePostVariables) =>
      fetchSendCode2faEmailSendCodePost(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type VerifyCode2faEmailVerifyCodePostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type VerifyCode2faEmailVerifyCodePostVariables = {
  body: Schemas.VerifyCodeTwoFaMethod;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchVerifyCode2faEmailVerifyCodePost = (
  variables: VerifyCode2faEmailVerifyCodePostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    VerifyCode2faEmailVerifyCodePostError,
    Schemas.VerifyCodeTwoFaMethod,
    {},
    {},
    {}
  >({ url: "/2fa/email/verify-code/", method: "post", ...variables, signal });

export const useVerifyCode2faEmailVerifyCodePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      VerifyCode2faEmailVerifyCodePostError,
      VerifyCode2faEmailVerifyCodePostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    VerifyCode2faEmailVerifyCodePostError,
    VerifyCode2faEmailVerifyCodePostVariables
  >({
    mutationFn: (variables: VerifyCode2faEmailVerifyCodePostVariables) =>
      fetchVerifyCode2faEmailVerifyCodePost(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type Activation2faTotpActivationPostError =
  Fetcher.ErrorWrapper<undefined>;

export type Activation2faTotpActivationPostVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchActivation2faTotpActivationPost = (
  variables: Activation2faTotpActivationPostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    Activation2faTotpActivationPostError,
    undefined,
    {},
    {},
    {}
  >({ url: "/2fa/totp/activation/", method: "post", ...variables, signal });

export const useActivation2faTotpActivationPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      Activation2faTotpActivationPostError,
      Activation2faTotpActivationPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    Activation2faTotpActivationPostError,
    Activation2faTotpActivationPostVariables
  >({
    mutationFn: (variables: Activation2faTotpActivationPostVariables) =>
      fetchActivation2faTotpActivationPost(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type Activation2faTotpDeactivatePostError =
  Fetcher.ErrorWrapper<undefined>;

export type Activation2faTotpDeactivatePostVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchActivation2faTotpDeactivatePost = (
  variables: Activation2faTotpDeactivatePostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    Activation2faTotpDeactivatePostError,
    undefined,
    {},
    {},
    {}
  >({ url: "/2fa/totp/deactivate/", method: "post", ...variables, signal });

export const useActivation2faTotpDeactivatePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      Activation2faTotpDeactivatePostError,
      Activation2faTotpDeactivatePostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    Activation2faTotpDeactivatePostError,
    Activation2faTotpDeactivatePostVariables
  >({
    mutationFn: (variables: Activation2faTotpDeactivatePostVariables) =>
      fetchActivation2faTotpDeactivatePost(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type VerifyCode2faTotpVerifyCodePostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type VerifyCode2faTotpVerifyCodePostVariables = {
  body: Schemas.VerifyCodeTwoFaMethod;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchVerifyCode2faTotpVerifyCodePost = (
  variables: VerifyCode2faTotpVerifyCodePostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    VerifyCode2faTotpVerifyCodePostError,
    Schemas.VerifyCodeTwoFaMethod,
    {},
    {},
    {}
  >({ url: "/2fa/totp/verify-code/", method: "post", ...variables, signal });

export const useVerifyCode2faTotpVerifyCodePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      VerifyCode2faTotpVerifyCodePostError,
      VerifyCode2faTotpVerifyCodePostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    VerifyCode2faTotpVerifyCodePostError,
    VerifyCode2faTotpVerifyCodePostVariables
  >({
    mutationFn: (variables: VerifyCode2faTotpVerifyCodePostVariables) =>
      fetchVerifyCode2faTotpVerifyCodePost(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type GetUserByUserId2faUsersGetError = Fetcher.ErrorWrapper<undefined>;

export type GetUserByUserId2faUsersGetVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchGetUserByUserId2faUsersGet = (
  variables: GetUserByUserId2faUsersGetVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetUserByUserId2faUsersGetError,
    undefined,
    {},
    {},
    {}
  >({ url: "/2fa/users/", method: "get", ...variables, signal });

export function getUserByUserId2FaUsersGetQuery(
  variables: GetUserByUserId2faUsersGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<void>;
};

export function getUserByUserId2FaUsersGetQuery(
  variables: GetUserByUserId2faUsersGetVariables | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ((options: QueryFnOptions) => Promise<void>) | reactQuery.SkipToken;
};

export function getUserByUserId2FaUsersGetQuery(
  variables: GetUserByUserId2faUsersGetVariables | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/2fa/users/",
      operationId: "getUserByUserId2faUsersGet",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetUserByUserId2faUsersGet(variables, signal),
  };
}

export const useSuspenseGetUserByUserId2faUsersGet = <TData = void,>(
  variables: GetUserByUserId2faUsersGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<void, GetUserByUserId2faUsersGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useSuspenseQuery<
    void,
    GetUserByUserId2faUsersGetError,
    TData
  >({
    ...getUserByUserId2FaUsersGetQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export const useGetUserByUserId2faUsersGet = <TData = void,>(
  variables: GetUserByUserId2faUsersGetVariables | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<void, GetUserByUserId2faUsersGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useQuery<void, GetUserByUserId2faUsersGetError, TData>({
    ...getUserByUserId2FaUsersGetQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type CreateEntityEntitiesCompaniesPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type CreateEntityEntitiesCompaniesPostVariables = {
  body: Schemas.CompanyCreateDTO;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchCreateEntityEntitiesCompaniesPost = (
  variables: CreateEntityEntitiesCompaniesPostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    CreateEntityEntitiesCompaniesPostError,
    Schemas.CompanyCreateDTO,
    {},
    {},
    {}
  >({ url: "/entities/companies/", method: "post", ...variables, signal });

export const useCreateEntityEntitiesCompaniesPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      CreateEntityEntitiesCompaniesPostError,
      CreateEntityEntitiesCompaniesPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    CreateEntityEntitiesCompaniesPostError,
    CreateEntityEntitiesCompaniesPostVariables
  >({
    mutationFn: (variables: CreateEntityEntitiesCompaniesPostVariables) =>
      fetchCreateEntityEntitiesCompaniesPost(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type GetEntitiesUserEntitiesCompaniesEntityIdPutPathParams = {
  /**
   * @format uuid
   */
  entityId: string;
};

export type GetEntitiesUserEntitiesCompaniesEntityIdPutError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetEntitiesUserEntitiesCompaniesEntityIdPutVariables = {
  body?: Schemas.CompanyUpdateDTO;
  pathParams: GetEntitiesUserEntitiesCompaniesEntityIdPutPathParams;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchGetEntitiesUserEntitiesCompaniesEntityIdPut = (
  variables: GetEntitiesUserEntitiesCompaniesEntityIdPutVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetEntitiesUserEntitiesCompaniesEntityIdPutError,
    Schemas.CompanyUpdateDTO,
    {},
    {},
    GetEntitiesUserEntitiesCompaniesEntityIdPutPathParams
  >({
    url: "/entities/companies/{entityId}/",
    method: "put",
    ...variables,
    signal,
  });

export const useGetEntitiesUserEntitiesCompaniesEntityIdPut = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      GetEntitiesUserEntitiesCompaniesEntityIdPutError,
      GetEntitiesUserEntitiesCompaniesEntityIdPutVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    GetEntitiesUserEntitiesCompaniesEntityIdPutError,
    GetEntitiesUserEntitiesCompaniesEntityIdPutVariables
  >({
    mutationFn: (
      variables: GetEntitiesUserEntitiesCompaniesEntityIdPutVariables,
    ) =>
      fetchGetEntitiesUserEntitiesCompaniesEntityIdPut(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type GetEntityEntitiesCompaniesEntityIdGetPathParams = {
  /**
   * @format uuid
   */
  entityId: string;
};

export type GetEntityEntitiesCompaniesEntityIdGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type GetEntityEntitiesCompaniesEntityIdGetVariables = {
  pathParams: GetEntityEntitiesCompaniesEntityIdGetPathParams;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchGetEntityEntitiesCompaniesEntityIdGet = (
  variables: GetEntityEntitiesCompaniesEntityIdGetVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetEntityEntitiesCompaniesEntityIdGetError,
    undefined,
    {},
    {},
    GetEntityEntitiesCompaniesEntityIdGetPathParams
  >({
    url: "/entities/companies/{entityId}/",
    method: "get",
    ...variables,
    signal,
  });

export function getEntityEntitiesCompaniesEntityIdGetQuery(
  variables: GetEntityEntitiesCompaniesEntityIdGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<void>;
};

export function getEntityEntitiesCompaniesEntityIdGetQuery(
  variables:
    | GetEntityEntitiesCompaniesEntityIdGetVariables
    | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ((options: QueryFnOptions) => Promise<void>) | reactQuery.SkipToken;
};

export function getEntityEntitiesCompaniesEntityIdGetQuery(
  variables:
    | GetEntityEntitiesCompaniesEntityIdGetVariables
    | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/entities/companies/{entityId}/",
      operationId: "getEntityEntitiesCompaniesEntityIdGet",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetEntityEntitiesCompaniesEntityIdGet(variables, signal),
  };
}

export const useSuspenseGetEntityEntitiesCompaniesEntityIdGet = <TData = void,>(
  variables: GetEntityEntitiesCompaniesEntityIdGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntityEntitiesCompaniesEntityIdGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useSuspenseQuery<
    void,
    GetEntityEntitiesCompaniesEntityIdGetError,
    TData
  >({
    ...getEntityEntitiesCompaniesEntityIdGetQuery(
      deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export const useGetEntityEntitiesCompaniesEntityIdGet = <TData = void,>(
  variables:
    | GetEntityEntitiesCompaniesEntityIdGetVariables
    | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntityEntitiesCompaniesEntityIdGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useQuery<
    void,
    GetEntityEntitiesCompaniesEntityIdGetError,
    TData
  >({
    ...getEntityEntitiesCompaniesEntityIdGetQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type GetEntitiesUserEntitiesCompaniesUserGetError =
  Fetcher.ErrorWrapper<undefined>;

export type GetEntitiesUserEntitiesCompaniesUserGetVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchGetEntitiesUserEntitiesCompaniesUserGet = (
  variables: GetEntitiesUserEntitiesCompaniesUserGetVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetEntitiesUserEntitiesCompaniesUserGetError,
    undefined,
    {},
    {},
    {}
  >({ url: "/entities/companies/user/", method: "get", ...variables, signal });

export function getEntitiesUserEntitiesCompaniesUserGetQuery(
  variables: GetEntitiesUserEntitiesCompaniesUserGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<void>;
};

export function getEntitiesUserEntitiesCompaniesUserGetQuery(
  variables:
    | GetEntitiesUserEntitiesCompaniesUserGetVariables
    | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ((options: QueryFnOptions) => Promise<void>) | reactQuery.SkipToken;
};

export function getEntitiesUserEntitiesCompaniesUserGetQuery(
  variables:
    | GetEntitiesUserEntitiesCompaniesUserGetVariables
    | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/entities/companies/user/",
      operationId: "getEntitiesUserEntitiesCompaniesUserGet",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetEntitiesUserEntitiesCompaniesUserGet(variables, signal),
  };
}

export const useSuspenseGetEntitiesUserEntitiesCompaniesUserGet = <
  TData = void,
>(
  variables: GetEntitiesUserEntitiesCompaniesUserGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntitiesUserEntitiesCompaniesUserGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useSuspenseQuery<
    void,
    GetEntitiesUserEntitiesCompaniesUserGetError,
    TData
  >({
    ...getEntitiesUserEntitiesCompaniesUserGetQuery(
      deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export const useGetEntitiesUserEntitiesCompaniesUserGet = <TData = void,>(
  variables:
    | GetEntitiesUserEntitiesCompaniesUserGetVariables
    | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntitiesUserEntitiesCompaniesUserGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useQuery<
    void,
    GetEntitiesUserEntitiesCompaniesUserGetError,
    TData
  >({
    ...getEntitiesUserEntitiesCompaniesUserGetQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type GetSchemaEntitiesCompaniesSchemaGetError =
  Fetcher.ErrorWrapper<undefined>;

export type GetSchemaEntitiesCompaniesSchemaGetVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchGetSchemaEntitiesCompaniesSchemaGet = (
  variables: GetSchemaEntitiesCompaniesSchemaGetVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetSchemaEntitiesCompaniesSchemaGetError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/entities/companies/schema/",
    method: "get",
    ...variables,
    signal,
  });

export function getSchemaEntitiesCompaniesSchemaGetQuery(
  variables: GetSchemaEntitiesCompaniesSchemaGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<void>;
};

export function getSchemaEntitiesCompaniesSchemaGetQuery(
  variables:
    | GetSchemaEntitiesCompaniesSchemaGetVariables
    | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ((options: QueryFnOptions) => Promise<void>) | reactQuery.SkipToken;
};

export function getSchemaEntitiesCompaniesSchemaGetQuery(
  variables:
    | GetSchemaEntitiesCompaniesSchemaGetVariables
    | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/entities/companies/schema/",
      operationId: "getSchemaEntitiesCompaniesSchemaGet",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetSchemaEntitiesCompaniesSchemaGet(variables, signal),
  };
}

export const useSuspenseGetSchemaEntitiesCompaniesSchemaGet = <TData = void,>(
  variables: GetSchemaEntitiesCompaniesSchemaGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetSchemaEntitiesCompaniesSchemaGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useSuspenseQuery<
    void,
    GetSchemaEntitiesCompaniesSchemaGetError,
    TData
  >({
    ...getSchemaEntitiesCompaniesSchemaGetQuery(
      deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export const useGetSchemaEntitiesCompaniesSchemaGet = <TData = void,>(
  variables:
    | GetSchemaEntitiesCompaniesSchemaGetVariables
    | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetSchemaEntitiesCompaniesSchemaGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useQuery<
    void,
    GetSchemaEntitiesCompaniesSchemaGetError,
    TData
  >({
    ...getSchemaEntitiesCompaniesSchemaGetQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type CreateEntityEntitiesIndividualsPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type CreateEntityEntitiesIndividualsPostVariables = {
  body: Schemas.CreateIndividualDTO;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchCreateEntityEntitiesIndividualsPost = (
  variables: CreateEntityEntitiesIndividualsPostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    CreateEntityEntitiesIndividualsPostError,
    Schemas.CreateIndividualDTO,
    {},
    {},
    {}
  >({ url: "/entities/individuals/", method: "post", ...variables, signal });

export const useCreateEntityEntitiesIndividualsPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      CreateEntityEntitiesIndividualsPostError,
      CreateEntityEntitiesIndividualsPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    CreateEntityEntitiesIndividualsPostError,
    CreateEntityEntitiesIndividualsPostVariables
  >({
    mutationFn: (variables: CreateEntityEntitiesIndividualsPostVariables) =>
      fetchCreateEntityEntitiesIndividualsPost(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type GetEntitiesUserEntitiesIndividualsEntityIdPutPathParams = {
  /**
   * @format uuid
   */
  entityId: string;
};

export type GetEntitiesUserEntitiesIndividualsEntityIdPutError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetEntitiesUserEntitiesIndividualsEntityIdPutVariables = {
  body?: Schemas.UpdateIndividualDTO;
  pathParams: GetEntitiesUserEntitiesIndividualsEntityIdPutPathParams;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchGetEntitiesUserEntitiesIndividualsEntityIdPut = (
  variables: GetEntitiesUserEntitiesIndividualsEntityIdPutVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetEntitiesUserEntitiesIndividualsEntityIdPutError,
    Schemas.UpdateIndividualDTO,
    {},
    {},
    GetEntitiesUserEntitiesIndividualsEntityIdPutPathParams
  >({
    url: "/entities/individuals/{entityId}/",
    method: "put",
    ...variables,
    signal,
  });

export const useGetEntitiesUserEntitiesIndividualsEntityIdPut = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      GetEntitiesUserEntitiesIndividualsEntityIdPutError,
      GetEntitiesUserEntitiesIndividualsEntityIdPutVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    GetEntitiesUserEntitiesIndividualsEntityIdPutError,
    GetEntitiesUserEntitiesIndividualsEntityIdPutVariables
  >({
    mutationFn: (
      variables: GetEntitiesUserEntitiesIndividualsEntityIdPutVariables,
    ) =>
      fetchGetEntitiesUserEntitiesIndividualsEntityIdPut(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type GetEntityEntitiesIndividualsEntityIdGetPathParams = {
  /**
   * @format uuid
   */
  entityId: string;
};

export type GetEntityEntitiesIndividualsEntityIdGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetEntityEntitiesIndividualsEntityIdGetVariables = {
  pathParams: GetEntityEntitiesIndividualsEntityIdGetPathParams;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchGetEntityEntitiesIndividualsEntityIdGet = (
  variables: GetEntityEntitiesIndividualsEntityIdGetVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetEntityEntitiesIndividualsEntityIdGetError,
    undefined,
    {},
    {},
    GetEntityEntitiesIndividualsEntityIdGetPathParams
  >({
    url: "/entities/individuals/{entityId}/",
    method: "get",
    ...variables,
    signal,
  });

export function getEntityEntitiesIndividualsEntityIdGetQuery(
  variables: GetEntityEntitiesIndividualsEntityIdGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<void>;
};

export function getEntityEntitiesIndividualsEntityIdGetQuery(
  variables:
    | GetEntityEntitiesIndividualsEntityIdGetVariables
    | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ((options: QueryFnOptions) => Promise<void>) | reactQuery.SkipToken;
};

export function getEntityEntitiesIndividualsEntityIdGetQuery(
  variables:
    | GetEntityEntitiesIndividualsEntityIdGetVariables
    | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/entities/individuals/{entityId}/",
      operationId: "getEntityEntitiesIndividualsEntityIdGet",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetEntityEntitiesIndividualsEntityIdGet(variables, signal),
  };
}

export const useSuspenseGetEntityEntitiesIndividualsEntityIdGet = <
  TData = void,
>(
  variables: GetEntityEntitiesIndividualsEntityIdGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntityEntitiesIndividualsEntityIdGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useSuspenseQuery<
    void,
    GetEntityEntitiesIndividualsEntityIdGetError,
    TData
  >({
    ...getEntityEntitiesIndividualsEntityIdGetQuery(
      deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export const useGetEntityEntitiesIndividualsEntityIdGet = <TData = void,>(
  variables:
    | GetEntityEntitiesIndividualsEntityIdGetVariables
    | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntityEntitiesIndividualsEntityIdGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useQuery<
    void,
    GetEntityEntitiesIndividualsEntityIdGetError,
    TData
  >({
    ...getEntityEntitiesIndividualsEntityIdGetQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type GetEntitiesUserEntitiesIndividualsUserGetError =
  Fetcher.ErrorWrapper<undefined>;

export type GetEntitiesUserEntitiesIndividualsUserGetVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchGetEntitiesUserEntitiesIndividualsUserGet = (
  variables: GetEntitiesUserEntitiesIndividualsUserGetVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetEntitiesUserEntitiesIndividualsUserGetError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/entities/individuals/user/",
    method: "get",
    ...variables,
    signal,
  });

export function getEntitiesUserEntitiesIndividualsUserGetQuery(
  variables: GetEntitiesUserEntitiesIndividualsUserGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<void>;
};

export function getEntitiesUserEntitiesIndividualsUserGetQuery(
  variables:
    | GetEntitiesUserEntitiesIndividualsUserGetVariables
    | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ((options: QueryFnOptions) => Promise<void>) | reactQuery.SkipToken;
};

export function getEntitiesUserEntitiesIndividualsUserGetQuery(
  variables:
    | GetEntitiesUserEntitiesIndividualsUserGetVariables
    | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/entities/individuals/user/",
      operationId: "getEntitiesUserEntitiesIndividualsUserGet",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetEntitiesUserEntitiesIndividualsUserGet(variables, signal),
  };
}

export const useSuspenseGetEntitiesUserEntitiesIndividualsUserGet = <
  TData = void,
>(
  variables: GetEntitiesUserEntitiesIndividualsUserGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntitiesUserEntitiesIndividualsUserGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useSuspenseQuery<
    void,
    GetEntitiesUserEntitiesIndividualsUserGetError,
    TData
  >({
    ...getEntitiesUserEntitiesIndividualsUserGetQuery(
      deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export const useGetEntitiesUserEntitiesIndividualsUserGet = <TData = void,>(
  variables:
    | GetEntitiesUserEntitiesIndividualsUserGetVariables
    | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntitiesUserEntitiesIndividualsUserGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useQuery<
    void,
    GetEntitiesUserEntitiesIndividualsUserGetError,
    TData
  >({
    ...getEntitiesUserEntitiesIndividualsUserGetQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type GetSchemaEntitiesIndividualsSchemaGetError =
  Fetcher.ErrorWrapper<undefined>;

export type GetSchemaEntitiesIndividualsSchemaGetVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchGetSchemaEntitiesIndividualsSchemaGet = (
  variables: GetSchemaEntitiesIndividualsSchemaGetVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetSchemaEntitiesIndividualsSchemaGetError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/entities/individuals/schema/",
    method: "get",
    ...variables,
    signal,
  });

export function getSchemaEntitiesIndividualsSchemaGetQuery(
  variables: GetSchemaEntitiesIndividualsSchemaGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<void>;
};

export function getSchemaEntitiesIndividualsSchemaGetQuery(
  variables:
    | GetSchemaEntitiesIndividualsSchemaGetVariables
    | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ((options: QueryFnOptions) => Promise<void>) | reactQuery.SkipToken;
};

export function getSchemaEntitiesIndividualsSchemaGetQuery(
  variables:
    | GetSchemaEntitiesIndividualsSchemaGetVariables
    | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/entities/individuals/schema/",
      operationId: "getSchemaEntitiesIndividualsSchemaGet",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetSchemaEntitiesIndividualsSchemaGet(variables, signal),
  };
}

export const useSuspenseGetSchemaEntitiesIndividualsSchemaGet = <TData = void,>(
  variables: GetSchemaEntitiesIndividualsSchemaGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetSchemaEntitiesIndividualsSchemaGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useSuspenseQuery<
    void,
    GetSchemaEntitiesIndividualsSchemaGetError,
    TData
  >({
    ...getSchemaEntitiesIndividualsSchemaGetQuery(
      deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export const useGetSchemaEntitiesIndividualsSchemaGet = <TData = void,>(
  variables:
    | GetSchemaEntitiesIndividualsSchemaGetVariables
    | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetSchemaEntitiesIndividualsSchemaGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useQuery<
    void,
    GetSchemaEntitiesIndividualsSchemaGetError,
    TData
  >({
    ...getSchemaEntitiesIndividualsSchemaGetQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type CreateEntityEntitiesSoleProprietorPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type CreateEntityEntitiesSoleProprietorPostVariables = {
  body: Schemas.CreateSoleProprietorDTO;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchCreateEntityEntitiesSoleProprietorPost = (
  variables: CreateEntityEntitiesSoleProprietorPostVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    CreateEntityEntitiesSoleProprietorPostError,
    Schemas.CreateSoleProprietorDTO,
    {},
    {},
    {}
  >({
    url: "/entities/sole-proprietor/",
    method: "post",
    ...variables,
    signal,
  });

export const useCreateEntityEntitiesSoleProprietorPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      CreateEntityEntitiesSoleProprietorPostError,
      CreateEntityEntitiesSoleProprietorPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    CreateEntityEntitiesSoleProprietorPostError,
    CreateEntityEntitiesSoleProprietorPostVariables
  >({
    mutationFn: (variables: CreateEntityEntitiesSoleProprietorPostVariables) =>
      fetchCreateEntityEntitiesSoleProprietorPost(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type GetEntitiesUserEntitiesSoleProprietorEntityIdPutPathParams = {
  /**
   * @format uuid
   */
  entityId: string;
};

export type GetEntitiesUserEntitiesSoleProprietorEntityIdPutError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetEntitiesUserEntitiesSoleProprietorEntityIdPutVariables = {
  body?: Schemas.UpdateSoleProprietorDTO;
  pathParams: GetEntitiesUserEntitiesSoleProprietorEntityIdPutPathParams;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchGetEntitiesUserEntitiesSoleProprietorEntityIdPut = (
  variables: GetEntitiesUserEntitiesSoleProprietorEntityIdPutVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetEntitiesUserEntitiesSoleProprietorEntityIdPutError,
    Schemas.UpdateSoleProprietorDTO,
    {},
    {},
    GetEntitiesUserEntitiesSoleProprietorEntityIdPutPathParams
  >({
    url: "/entities/sole-proprietor/{entityId}/",
    method: "put",
    ...variables,
    signal,
  });

export const useGetEntitiesUserEntitiesSoleProprietorEntityIdPut = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      GetEntitiesUserEntitiesSoleProprietorEntityIdPutError,
      GetEntitiesUserEntitiesSoleProprietorEntityIdPutVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useLawyersSiteApiContext();
  return reactQuery.useMutation<
    void,
    GetEntitiesUserEntitiesSoleProprietorEntityIdPutError,
    GetEntitiesUserEntitiesSoleProprietorEntityIdPutVariables
  >({
    mutationFn: (
      variables: GetEntitiesUserEntitiesSoleProprietorEntityIdPutVariables,
    ) =>
      fetchGetEntitiesUserEntitiesSoleProprietorEntityIdPut(
        deepMerge(fetcherOptions, variables),
      ),
    ...options,
  });
};

export type GetEntityEntitiesSoleProprietorEntityIdGetPathParams = {
  /**
   * @format uuid
   */
  entityId: string;
};

export type GetEntityEntitiesSoleProprietorEntityIdGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetEntityEntitiesSoleProprietorEntityIdGetVariables = {
  pathParams: GetEntityEntitiesSoleProprietorEntityIdGetPathParams;
} & LawyersSiteApiContext["fetcherOptions"];

export const fetchGetEntityEntitiesSoleProprietorEntityIdGet = (
  variables: GetEntityEntitiesSoleProprietorEntityIdGetVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetEntityEntitiesSoleProprietorEntityIdGetError,
    undefined,
    {},
    {},
    GetEntityEntitiesSoleProprietorEntityIdGetPathParams
  >({
    url: "/entities/sole-proprietor/{entityId}/",
    method: "get",
    ...variables,
    signal,
  });

export function getEntityEntitiesSoleProprietorEntityIdGetQuery(
  variables: GetEntityEntitiesSoleProprietorEntityIdGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<void>;
};

export function getEntityEntitiesSoleProprietorEntityIdGetQuery(
  variables:
    | GetEntityEntitiesSoleProprietorEntityIdGetVariables
    | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ((options: QueryFnOptions) => Promise<void>) | reactQuery.SkipToken;
};

export function getEntityEntitiesSoleProprietorEntityIdGetQuery(
  variables:
    | GetEntityEntitiesSoleProprietorEntityIdGetVariables
    | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/entities/sole-proprietor/{entityId}/",
      operationId: "getEntityEntitiesSoleProprietorEntityIdGet",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetEntityEntitiesSoleProprietorEntityIdGet(variables, signal),
  };
}

export const useSuspenseGetEntityEntitiesSoleProprietorEntityIdGet = <
  TData = void,
>(
  variables: GetEntityEntitiesSoleProprietorEntityIdGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntityEntitiesSoleProprietorEntityIdGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useSuspenseQuery<
    void,
    GetEntityEntitiesSoleProprietorEntityIdGetError,
    TData
  >({
    ...getEntityEntitiesSoleProprietorEntityIdGetQuery(
      deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export const useGetEntityEntitiesSoleProprietorEntityIdGet = <TData = void,>(
  variables:
    | GetEntityEntitiesSoleProprietorEntityIdGetVariables
    | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntityEntitiesSoleProprietorEntityIdGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useQuery<
    void,
    GetEntityEntitiesSoleProprietorEntityIdGetError,
    TData
  >({
    ...getEntityEntitiesSoleProprietorEntityIdGetQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type GetEntitiesUserEntitiesSoleProprietorUserGetError =
  Fetcher.ErrorWrapper<undefined>;

export type GetEntitiesUserEntitiesSoleProprietorUserGetVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchGetEntitiesUserEntitiesSoleProprietorUserGet = (
  variables: GetEntitiesUserEntitiesSoleProprietorUserGetVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetEntitiesUserEntitiesSoleProprietorUserGetError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/entities/sole-proprietor/user/",
    method: "get",
    ...variables,
    signal,
  });

export function getEntitiesUserEntitiesSoleProprietorUserGetQuery(
  variables: GetEntitiesUserEntitiesSoleProprietorUserGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<void>;
};

export function getEntitiesUserEntitiesSoleProprietorUserGetQuery(
  variables:
    | GetEntitiesUserEntitiesSoleProprietorUserGetVariables
    | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ((options: QueryFnOptions) => Promise<void>) | reactQuery.SkipToken;
};

export function getEntitiesUserEntitiesSoleProprietorUserGetQuery(
  variables:
    | GetEntitiesUserEntitiesSoleProprietorUserGetVariables
    | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/entities/sole-proprietor/user/",
      operationId: "getEntitiesUserEntitiesSoleProprietorUserGet",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetEntitiesUserEntitiesSoleProprietorUserGet(
              variables,
              signal,
            ),
  };
}

export const useSuspenseGetEntitiesUserEntitiesSoleProprietorUserGet = <
  TData = void,
>(
  variables: GetEntitiesUserEntitiesSoleProprietorUserGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntitiesUserEntitiesSoleProprietorUserGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useSuspenseQuery<
    void,
    GetEntitiesUserEntitiesSoleProprietorUserGetError,
    TData
  >({
    ...getEntitiesUserEntitiesSoleProprietorUserGetQuery(
      deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export const useGetEntitiesUserEntitiesSoleProprietorUserGet = <TData = void,>(
  variables:
    | GetEntitiesUserEntitiesSoleProprietorUserGetVariables
    | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntitiesUserEntitiesSoleProprietorUserGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useQuery<
    void,
    GetEntitiesUserEntitiesSoleProprietorUserGetError,
    TData
  >({
    ...getEntitiesUserEntitiesSoleProprietorUserGetQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type GetSchemaEntitiesSoleProprietorSchemaGetError =
  Fetcher.ErrorWrapper<undefined>;

export type GetSchemaEntitiesSoleProprietorSchemaGetVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchGetSchemaEntitiesSoleProprietorSchemaGet = (
  variables: GetSchemaEntitiesSoleProprietorSchemaGetVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetSchemaEntitiesSoleProprietorSchemaGetError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/entities/sole-proprietor/schema/",
    method: "get",
    ...variables,
    signal,
  });

export function getSchemaEntitiesSoleProprietorSchemaGetQuery(
  variables: GetSchemaEntitiesSoleProprietorSchemaGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<void>;
};

export function getSchemaEntitiesSoleProprietorSchemaGetQuery(
  variables:
    | GetSchemaEntitiesSoleProprietorSchemaGetVariables
    | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ((options: QueryFnOptions) => Promise<void>) | reactQuery.SkipToken;
};

export function getSchemaEntitiesSoleProprietorSchemaGetQuery(
  variables:
    | GetSchemaEntitiesSoleProprietorSchemaGetVariables
    | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/entities/sole-proprietor/schema/",
      operationId: "getSchemaEntitiesSoleProprietorSchemaGet",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetSchemaEntitiesSoleProprietorSchemaGet(variables, signal),
  };
}

export const useSuspenseGetSchemaEntitiesSoleProprietorSchemaGet = <
  TData = void,
>(
  variables: GetSchemaEntitiesSoleProprietorSchemaGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetSchemaEntitiesSoleProprietorSchemaGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useSuspenseQuery<
    void,
    GetSchemaEntitiesSoleProprietorSchemaGetError,
    TData
  >({
    ...getSchemaEntitiesSoleProprietorSchemaGetQuery(
      deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export const useGetSchemaEntitiesSoleProprietorSchemaGet = <TData = void,>(
  variables:
    | GetSchemaEntitiesSoleProprietorSchemaGetVariables
    | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetSchemaEntitiesSoleProprietorSchemaGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useQuery<
    void,
    GetSchemaEntitiesSoleProprietorSchemaGetError,
    TData
  >({
    ...getSchemaEntitiesSoleProprietorSchemaGetQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type GetEntitiesUserEntitiesUserGetError =
  Fetcher.ErrorWrapper<undefined>;

export type GetEntitiesUserEntitiesUserGetVariables =
  LawyersSiteApiContext["fetcherOptions"];

export const fetchGetEntitiesUserEntitiesUserGet = (
  variables: GetEntitiesUserEntitiesUserGetVariables,
  signal?: AbortSignal,
) =>
  lawyersSiteApiFetch<
    void,
    GetEntitiesUserEntitiesUserGetError,
    undefined,
    {},
    {},
    {}
  >({ url: "/entities/user/", method: "get", ...variables, signal });

export function getEntitiesUserEntitiesUserGetQuery(
  variables: GetEntitiesUserEntitiesUserGetVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<void>;
};

export function getEntitiesUserEntitiesUserGetQuery(
  variables: GetEntitiesUserEntitiesUserGetVariables | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: ((options: QueryFnOptions) => Promise<void>) | reactQuery.SkipToken;
};

export function getEntitiesUserEntitiesUserGetQuery(
  variables: GetEntitiesUserEntitiesUserGetVariables | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/entities/user/",
      operationId: "getEntitiesUserEntitiesUserGet",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetEntitiesUserEntitiesUserGet(variables, signal),
  };
}

export const useSuspenseGetEntitiesUserEntitiesUserGet = <TData = void,>(
  variables: GetEntitiesUserEntitiesUserGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntitiesUserEntitiesUserGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useSuspenseQuery<
    void,
    GetEntitiesUserEntitiesUserGetError,
    TData
  >({
    ...getEntitiesUserEntitiesUserGetQuery(
      deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export const useGetEntitiesUserEntitiesUserGet = <TData = void,>(
  variables: GetEntitiesUserEntitiesUserGetVariables | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      void,
      GetEntitiesUserEntitiesUserGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useLawyersSiteApiContext(options);
  return reactQuery.useQuery<void, GetEntitiesUserEntitiesUserGetError, TData>({
    ...getEntitiesUserEntitiesUserGetQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/2fa/users/";
      operationId: "getUserByUserId2faUsersGet";
      variables: GetUserByUserId2faUsersGetVariables | reactQuery.SkipToken;
    }
  | {
      path: "/entities/companies/{entityId}/";
      operationId: "getEntityEntitiesCompaniesEntityIdGet";
      variables:
        | GetEntityEntitiesCompaniesEntityIdGetVariables
        | reactQuery.SkipToken;
    }
  | {
      path: "/entities/companies/user/";
      operationId: "getEntitiesUserEntitiesCompaniesUserGet";
      variables:
        | GetEntitiesUserEntitiesCompaniesUserGetVariables
        | reactQuery.SkipToken;
    }
  | {
      path: "/entities/companies/schema/";
      operationId: "getSchemaEntitiesCompaniesSchemaGet";
      variables:
        | GetSchemaEntitiesCompaniesSchemaGetVariables
        | reactQuery.SkipToken;
    }
  | {
      path: "/entities/individuals/{entityId}/";
      operationId: "getEntityEntitiesIndividualsEntityIdGet";
      variables:
        | GetEntityEntitiesIndividualsEntityIdGetVariables
        | reactQuery.SkipToken;
    }
  | {
      path: "/entities/individuals/user/";
      operationId: "getEntitiesUserEntitiesIndividualsUserGet";
      variables:
        | GetEntitiesUserEntitiesIndividualsUserGetVariables
        | reactQuery.SkipToken;
    }
  | {
      path: "/entities/individuals/schema/";
      operationId: "getSchemaEntitiesIndividualsSchemaGet";
      variables:
        | GetSchemaEntitiesIndividualsSchemaGetVariables
        | reactQuery.SkipToken;
    }
  | {
      path: "/entities/sole-proprietor/{entityId}/";
      operationId: "getEntityEntitiesSoleProprietorEntityIdGet";
      variables:
        | GetEntityEntitiesSoleProprietorEntityIdGetVariables
        | reactQuery.SkipToken;
    }
  | {
      path: "/entities/sole-proprietor/user/";
      operationId: "getEntitiesUserEntitiesSoleProprietorUserGet";
      variables:
        | GetEntitiesUserEntitiesSoleProprietorUserGetVariables
        | reactQuery.SkipToken;
    }
  | {
      path: "/entities/sole-proprietor/schema/";
      operationId: "getSchemaEntitiesSoleProprietorSchemaGet";
      variables:
        | GetSchemaEntitiesSoleProprietorSchemaGetVariables
        | reactQuery.SkipToken;
    }
  | {
      path: "/entities/user/";
      operationId: "getEntitiesUserEntitiesUserGet";
      variables: GetEntitiesUserEntitiesUserGetVariables | reactQuery.SkipToken;
    };
